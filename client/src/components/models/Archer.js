/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { Html } from "@react-three/drei";
import styled from "styled-components";

const NameTag = styled.div`
  padding-top: 10px;
  transform: translate3d(-70%, -600%, 0);
  text-align: left;
  background: #202035;
  color: white;
  padding: 5px 5px;
  border-radius: 5px;
  font-size: 1rem;
`;

export default function Model({ action }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/archer.glb");
  const { actions } = useAnimations(animations, group);

  const previousAction = usePrevious(action);

  useEffect(() => {
    console.log("actions", actions);
    if (previousAction) {
      actions[previousAction].fadeOut(0.2);
      actions[previousAction].stop();
    }
    actions[action].play();
    actions[action].fadeIn(0.2);
  }, [action, actions, previousAction]);

  return (
    <group ref={group} dispose={null}>
      <group>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.Hips} />
          <skinnedMesh
            geometry={nodes.Erika_Archer_Body_Mesh.geometry}
            material={materials.Body_MAT}
            skeleton={nodes.Erika_Archer_Body_Mesh.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Erika_Archer_Clothes_Mesh.geometry}
            material={materials.Akai_MAT}
            skeleton={nodes.Erika_Archer_Clothes_Mesh.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Erika_Archer_Eyelashes_Mesh.geometry}
            material={materials.Lashes_MAT}
            skeleton={nodes.Erika_Archer_Eyelashes_Mesh.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Erika_Archer_Eyes_Mesh.geometry}
            material={materials.EyeSpec_MAT}
            skeleton={nodes.Erika_Archer_Eyes_Mesh.skeleton}
          />
        </group>
      </group>
      <Html distanceFactor={10}>
        <NameTag> {`Archer`} </NameTag>
      </Html>
    </group>
  );
}

useGLTF.preload("/archer.glb");

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
